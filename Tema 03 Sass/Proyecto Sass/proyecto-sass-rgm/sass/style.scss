// 4 nesting 1 punto    5
// 4 mixins con un solo argumento (tamaño texto, 
// 4 mixins con un argumento y varios parámetros
// 4 mixins con interpolaciones
// Llevo 8 mixins en total de 12
// Usar extend  X
// Usar placeholder X
// 4 funciones de sass (lighten, darken) X
// Mediaquery + if (meter uno mas 3 tamaños) X
// Usar sprites X
// 4 funciones (for, each, while) 2 each, varios ifs, 

// La mayoría de los estilos en esta hoja
@import "compass";
//Variables y funciones
@import "_variables";
@import "_functions";
// Mixins y menús
@import "_mixins";
@import "_menus";


@keyframes iluminar {
    from {
        color: $colorText;
        background-color: $colorBackground;
    }

    to {
        color: $colorTextHover;
        background-color: $colorBackgroundHover;
    }
}

.container {
    background-color: $colorBackground;
    width: 100%;
    @include respond-to($large) {
        max-width: 1560px;
    }

    @include respond-to($medium) {
        max-width: 1060px;
    }

    @include respond-to($small) {
        max-width: 830px;
    }
}

body {
    background-color: $colorBackground;
    font-family: Arial, Helvetica, sans-serif;
}

// Selecciono todos los iconos en una variable para crear el sprite
$icons: sprite-map("../img/icons/*.png");

i {
    background: $icons;
    display: inline-block;
}

@each $i in sprite_names($icons) {
    .icon-#{$i} {
        background-position: sprite-position($icons, $i);
        @include sprite-dimensions($icons, $i);
    }
}

.header {
    width: 100%;
    background-color: $colorBackground;
    @include padding (1em, 1em, 1em, 1em);
    color: $colorText;

    .logo-container {
        @include flex(row, nowrap, center, center);
        img {
            @include respond-to($xsmall) {
                width: 50%;
            }
        }
    }

    .menu-button-container {
        display: flex;
        justify-content: end;
        @include padding(0.5em, 1em, 0.5em, 0.5em);
    }

    .social-networks {
        @include flex(row, nowrap, end, end);
        @include padding(1em, 1em, 1em, 1em);
    }

    .button{
        width: 10%;
        background-color: crimson;
        display: none;
        cursor: pointer;
        @include media() {
            display: block;
        }

        &:active {
            background-color: light-comp(crimson);
        }
    }

    .svg {
        width: 2em;
        height: 2em;
    }
}

// Recorro textSizes como si fuese un array, dentro del mismo each creo el valor a recorrer
@each $textSize in $textSizes {
    //+1 porque parte de 0
    $index: index($list: $textSizes, $value: $textSize) + 1;
    // Interpolacion
    %text-#{$textSize} {
        font-size: round($baseTextSize * $index / 0.75);
    }
}

.articles-container {
    @include articleWidth (100%);
    // width: 100%;
    display: flex;
    background-color: $colorArticleBackground;
    flex-wrap: wrap;
    justify-content: center;

    .article-card {
        height: fit-content;
        // Mixin sin argumentos, me coge los que definí por defecto (0.5em)
        @include margin();

        &-content {
            position: relative;
        }
    
        &-content-image {
            justify-content: center;
            height: max-content;
        }
    
        &-content-text {
            color: $colorText;
            justify-content: center;
            text-align: center;
            position: absolute; 
            bottom: 0; 
            left: 0; 
            right: 0; 
            background-color: rgba($colorArticleBackground, .8);
            
            &-title {
                @extend %text-medium;
            }
    
            &-subtitle {
                @extend %text-small;
            }
        }
    }
}

#noticias {
    text-align: center;
}

.news-container {
    @extend .articles-container;
    color: $colorText;
    
    .news-section {
        @extend .article-card;

        .news-text {
            &-title {
                text-align: center;
                @extend %text-medium;
            }
    
            &-subtitle {
                text-align: center;
                @extend %text-small;
            }
        }
    }
}